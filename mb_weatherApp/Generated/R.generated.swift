//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }

    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.localizable` struct is generated, and contains static references to 31 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: API Key
      ///
      /// Key: apiKey
      ///
      /// Locales: en
      var apiKey: RswiftResources.StringResource { .init(key: "apiKey", tableName: "Localizable", source: source, developmentValue: "API Key", comment: nil) }

      /// en translation: WeatherApp
      ///
      /// Key: appName
      ///
      /// Locales: en
      var appName: RswiftResources.StringResource { .init(key: "appName", tableName: "Localizable", source: source, developmentValue: "WeatherApp", comment: nil) }

      /// en translation: < Back
      ///
      /// Key: back
      ///
      /// Locales: en
      var back: RswiftResources.StringResource { .init(key: "back", tableName: "Localizable", source: source, developmentValue: "< Back", comment: nil) }

      /// en translation: We're having trouble processing your request. Try again.
      ///
      /// Key: badRequestErrorMessage
      ///
      /// Locales: en
      var badRequestErrorMessage: RswiftResources.StringResource { .init(key: "badRequestErrorMessage", tableName: "Localizable", source: source, developmentValue: "We're having trouble processing your request. Try again.", comment: nil) }

      /// en translation: City name
      ///
      /// Key: cityName
      ///
      /// Locales: en
      var cityName: RswiftResources.StringResource { .init(key: "cityName", tableName: "Localizable", source: source, developmentValue: "City name", comment: nil) }

      /// en translation: Clear sky
      ///
      /// Key: clearSky
      ///
      /// Locales: en
      var clearSky: RswiftResources.StringResource { .init(key: "clearSky", tableName: "Localizable", source: source, developmentValue: "Clear sky", comment: nil) }

      /// en translation: Clouds
      ///
      /// Key: clouds
      ///
      /// Locales: en
      var clouds: RswiftResources.StringResource { .init(key: "clouds", tableName: "Localizable", source: source, developmentValue: "Clouds", comment: nil) }

      /// en translation: Continue
      ///
      /// Key: continue
      ///
      /// Locales: en
      var `continue`: RswiftResources.StringResource { .init(key: "continue", tableName: "Localizable", source: source, developmentValue: "Continue", comment: nil) }

      /// en translation: Data read error, please try again.
      ///
      /// Key: dataReadErrorMessage
      ///
      /// Locales: en
      var dataReadErrorMessage: RswiftResources.StringResource { .init(key: "dataReadErrorMessage", tableName: "Localizable", source: source, developmentValue: "Data read error, please try again.", comment: nil) }

      /// en translation: Drizzle
      ///
      /// Key: drizzle
      ///
      /// Locales: en
      var drizzle: RswiftResources.StringResource { .init(key: "drizzle", tableName: "Localizable", source: source, developmentValue: "Drizzle", comment: nil) }

      /// en translation: Dust
      ///
      /// Key: dust
      ///
      /// Locales: en
      var dust: RswiftResources.StringResource { .init(key: "dust", tableName: "Localizable", source: source, developmentValue: "Dust", comment: nil) }

      /// en translation: Error
      ///
      /// Key: error
      ///
      /// Locales: en
      var error: RswiftResources.StringResource { .init(key: "error", tableName: "Localizable", source: source, developmentValue: "Error", comment: nil) }

      /// en translation: Error reading cities from file.
      ///
      /// Key: errorCitiesFromFileMessage
      ///
      /// Locales: en
      var errorCitiesFromFileMessage: RswiftResources.StringResource { .init(key: "errorCitiesFromFileMessage", tableName: "Localizable", source: source, developmentValue: "Error reading cities from file.", comment: nil) }

      /// en translation: Cities file not found.
      ///
      /// Key: errorCitiesNoFileMessage
      ///
      /// Locales: en
      var errorCitiesNoFileMessage: RswiftResources.StringResource { .init(key: "errorCitiesNoFileMessage", tableName: "Localizable", source: source, developmentValue: "Cities file not found.", comment: nil) }

      /// en translation: Fog
      ///
      /// Key: fog
      ///
      /// Locales: en
      var fog: RswiftResources.StringResource { .init(key: "fog", tableName: "Localizable", source: source, developmentValue: "Fog", comment: nil) }

      /// en translation: Haze
      ///
      /// Key: haze
      ///
      /// Locales: en
      var haze: RswiftResources.StringResource { .init(key: "haze", tableName: "Localizable", source: source, developmentValue: "Haze", comment: nil) }

      /// en translation: The text contains illegal characters.
      ///
      /// Key: illegalCharactersErrorMessage
      ///
      /// Locales: en
      var illegalCharactersErrorMessage: RswiftResources.StringResource { .init(key: "illegalCharactersErrorMessage", tableName: "Localizable", source: source, developmentValue: "The text contains illegal characters.", comment: nil) }

      /// en translation: Last selected:
      ///
      /// Key: lastSelected
      ///
      /// Locales: en
      var lastSelected: RswiftResources.StringResource { .init(key: "lastSelected", tableName: "Localizable", source: source, developmentValue: "Last selected:", comment: nil) }

      /// en translation: Log In
      ///
      /// Key: logIn
      ///
      /// Locales: en
      var logIn: RswiftResources.StringResource { .init(key: "logIn", tableName: "Localizable", source: source, developmentValue: "Log In", comment: nil) }

      /// en translation: Mist
      ///
      /// Key: mist
      ///
      /// Locales: en
      var mist: RswiftResources.StringResource { .init(key: "mist", tableName: "Localizable", source: source, developmentValue: "Mist", comment: nil) }

      /// en translation: No city found.
      ///
      /// Key: noCityFound
      ///
      /// Locales: en
      var noCityFound: RswiftResources.StringResource { .init(key: "noCityFound", tableName: "Localizable", source: source, developmentValue: "No city found.", comment: nil) }

      /// en translation: Ok
      ///
      /// Key: ok
      ///
      /// Locales: en
      var ok: RswiftResources.StringResource { .init(key: "ok", tableName: "Localizable", source: source, developmentValue: "Ok", comment: nil) }

      /// en translation: Rain
      ///
      /// Key: rain
      ///
      /// Locales: en
      var rain: RswiftResources.StringResource { .init(key: "rain", tableName: "Localizable", source: source, developmentValue: "Rain", comment: nil) }

      /// en translation: Sand
      ///
      /// Key: sand
      ///
      /// Locales: en
      var sand: RswiftResources.StringResource { .init(key: "sand", tableName: "Localizable", source: source, developmentValue: "Sand", comment: nil) }

      /// en translation: Select a city:
      ///
      /// Key: selectCity
      ///
      /// Locales: en
      var selectCity: RswiftResources.StringResource { .init(key: "selectCity", tableName: "Localizable", source: source, developmentValue: "Select a city:", comment: nil) }

      /// en translation: Smoke
      ///
      /// Key: smoke
      ///
      /// Locales: en
      var smoke: RswiftResources.StringResource { .init(key: "smoke", tableName: "Localizable", source: source, developmentValue: "Smoke", comment: nil) }

      /// en translation: Snow
      ///
      /// Key: snow
      ///
      /// Locales: en
      var snow: RswiftResources.StringResource { .init(key: "snow", tableName: "Localizable", source: source, developmentValue: "Snow", comment: nil) }

      /// en translation: Squall
      ///
      /// Key: squall
      ///
      /// Locales: en
      var squall: RswiftResources.StringResource { .init(key: "squall", tableName: "Localizable", source: source, developmentValue: "Squall", comment: nil) }

      /// en translation: Thunderstorm
      ///
      /// Key: thunderstorm
      ///
      /// Locales: en
      var thunderstorm: RswiftResources.StringResource { .init(key: "thunderstorm", tableName: "Localizable", source: source, developmentValue: "Thunderstorm", comment: nil) }

      /// en translation: Tornado
      ///
      /// Key: tornado
      ///
      /// Locales: en
      var tornado: RswiftResources.StringResource { .init(key: "tornado", tableName: "Localizable", source: source, developmentValue: "Tornado", comment: nil) }

      /// en translation: Login failed. Check your API key.
      ///
      /// Key: unauthorizedErrorMessage
      ///
      /// Locales: en
      var unauthorizedErrorMessage: RswiftResources.StringResource { .init(key: "unauthorizedErrorMessage", tableName: "Localizable", source: source, developmentValue: "Login failed. Check your API key.", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }

    /// Color `brightSun`.
    var brightSun: RswiftResources.ColorResource { .init(name: "brightSun", path: [], bundle: bundle) }

    /// Color `ebonyClay`.
    var ebonyClay: RswiftResources.ColorResource { .init(name: "ebonyClay", path: [], bundle: bundle) }

    /// Color `raven`.
    var raven: RswiftResources.ColorResource { .init(name: "raven", path: [], bundle: bundle) }

    /// Color `woodsmoke`.
    var woodsmoke: RswiftResources.ColorResource { .init(name: "woodsmoke", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 13 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `icCloud`.
    var icCloud: RswiftResources.ImageResource { .init(name: "icCloud", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icCloudDay`.
    var icCloudDay: RswiftResources.ImageResource { .init(name: "icCloudDay", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icDroplets`.
    var icDroplets: RswiftResources.ImageResource { .init(name: "icDroplets", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icDust`.
    var icDust: RswiftResources.ImageResource { .init(name: "icDust", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icHurricane`.
    var icHurricane: RswiftResources.ImageResource { .init(name: "icHurricane", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icMist`.
    var icMist: RswiftResources.ImageResource { .init(name: "icMist", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icRain`.
    var icRain: RswiftResources.ImageResource { .init(name: "icRain", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icSearch`.
    var icSearch: RswiftResources.ImageResource { .init(name: "icSearch", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icSnow`.
    var icSnow: RswiftResources.ImageResource { .init(name: "icSnow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icSun`.
    var icSun: RswiftResources.ImageResource { .init(name: "icSun", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icThunder`.
    var icThunder: RswiftResources.ImageResource { .init(name: "icThunder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icThunder2`.
    var icThunder2: RswiftResources.ImageResource { .init(name: "icThunder2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icWind`.
    var icWind: RswiftResources.ImageResource { .init(name: "icWind", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.file` struct is generated, and contains static references to 1 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `citiesList.json`.
    var citiesListJson: RswiftResources.FileResource { .init(name: "citiesList", pathExtension: "json", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {

      }
    }
  }
}